'use strict';
var multimatch = require('multimatch'),
	findup = require('findup-sync'),
	extend = require('extend'),
	path = require('path'),
	registry = require('./registry.json');

function camelize(str, toggle) {
	return !! toggle ? str.replace(/-(\w)/g, function(m, p1) {
		return p1.toUpperCase();
	}) : str;
}

module.exports = function(options) {
	options = extend({}, {
		pattern: [],
		config: findup('package.json', {cwd: parentDir}),
		scope: ['dependencies', 'devDependencies', 'peerDependencies'],
		replaceString: /^postcss-/,
		camelize: true,
		rename: {}
	}, options || {});

	var result = {},
		config,
		requireFn,
		names;

	options.pattern = options.pattern.concat(registry.pattern);
	options.pattern.push('!postcss-load-plugins');
	extend(options.rename, registry.rename);


	if(typeof options.requireFn === 'function') {
		requireFn = options.requireFn;
	} else if(typeof options.config === 'string') {
		requireFn = function (name) {
			return require(findup(path.join('node_modules', name), {cwd: path.dirname(options.config)}));
		};
	} else {
		requireFn = require;
	}

	config = (typeof options.config === 'string') ? require(options.config) : options.config;

	if( ! config) {
		throw new Error('Could not find dependencies. Do you have a package.json file in your project?');
	}

	names = options.scope.reduce(function(result, prop) {
		return result.concat(Object.keys(config[prop] || {}));
	}, []);

	multimatch(names, options.pattern).forEach(function(name) {
		var requireName = options.rename[name] || camelize(name.replace(options.replaceString, ''), options.camelize);

		Object.defineProperty(result, requireName, {
			get: function() {
				return requireFn(name);
			}
		});
	});

	return result;
};


var parentDir = path.dirname(module.parent.filename);

// Necessary to get the current `module.parent` and resolve paths correctly.
delete require.cache[__filename];

